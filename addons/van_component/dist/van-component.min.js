var l = Object.defineProperty;
var d = (e, t, a) => t in e ? l(e, t, { enumerable: !0, configurable: !0, writable: !0, value: a }) : e[t] = a;
var i = (e, t, a) => (d(e, typeof t != "symbol" ? t + "" : t, a), a);
import n from "vanjs-core";
function m(e, t, a = []) {
  var r;
  window.customElements.define(
    e,
    (r = class extends HTMLElement {
      constructor() {
        super();
        i(this, "attrs", {});
      }
      connectedCallback() {
        for (let s of this.attributes)
          this.attrs[s.name.replace(/-([a-z])/g, (c, o) => o.toUpperCase())] = n.state(s.value);
        n.add(
          this.attachShadow({ mode: "open" }),
          () => t(this.attrs)
        );
      }
      attributeChangedCallback(s, c, o) {
        this.attrs[s] && (this.attrs[s].val = o);
      }
    }, i(r, "observedAttributes", a), r)
  );
}
export {
  m as createComponent
};
